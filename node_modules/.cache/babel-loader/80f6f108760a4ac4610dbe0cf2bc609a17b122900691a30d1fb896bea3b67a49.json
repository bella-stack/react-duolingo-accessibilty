{"ast":null,"code":"var _jsxFileName = \"/Users/wusixuan/Desktop/CSCS436/project/my-final-project/src/components/VoiceToText.js\",\n  _s = $RefreshSig$();\n// VoiceToText.js\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VoiceToText = () => {\n  _s();\n  const [isListening, setIsListening] = useState(false);\n  const [transcript, setTranscript] = useState('');\n  useEffect(() => {\n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    const recognition = new SpeechRecognition();\n    recognition.continuous = true; // Keep listening even after voice is detected\n    recognition.interimResults = true; // Show interim results\n    recognition.lang = 'en-US'; // Set the language\n\n    recognition.onstart = () => {\n      console.log('Voice recognition activated. Start speaking...');\n    };\n    recognition.onresult = event => {\n      const transcriptArr = Array.from(event.results).map(result => result[0]).map(result => result.transcript);\n      setTranscript(transcriptArr.join(' '));\n    };\n    recognition.onend = () => {\n      console.log('Voice recognition stopped.');\n    };\n\n    // Start or stop recognition based on `isListening`\n    if (isListening) {\n      recognition.start();\n    } else {\n      recognition.stop();\n    }\n\n    // Clean up function to stop recognition when the component unmounts\n    return () => recognition.stop();\n  }, [isListening]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setIsListening(prevState => !prevState),\n      children: isListening ? 'Stop Listening' : 'Start Listening'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: transcript\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n_s(VoiceToText, \"WjGDiogr+E9YMWEj/hdGCz42YjY=\");\n_c = VoiceToText;\nexport default VoiceToText;\nvar _c;\n$RefreshReg$(_c, \"VoiceToText\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","VoiceToText","_s","isListening","setIsListening","transcript","setTranscript","SpeechRecognition","window","webkitSpeechRecognition","recognition","continuous","interimResults","lang","onstart","console","log","onresult","event","transcriptArr","Array","from","results","map","result","join","onend","start","stop","children","onClick","prevState","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/wusixuan/Desktop/CSCS436/project/my-final-project/src/components/VoiceToText.js"],"sourcesContent":["// VoiceToText.js\nimport React, { useState, useEffect } from 'react';\n\nconst VoiceToText = () => {\n  const [isListening, setIsListening] = useState(false);\n  const [transcript, setTranscript] = useState('');\n\n  useEffect(() => {\n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    const recognition = new SpeechRecognition();\n\n    recognition.continuous = true; // Keep listening even after voice is detected\n    recognition.interimResults = true; // Show interim results\n    recognition.lang = 'en-US'; // Set the language\n\n    recognition.onstart = () => {\n      console.log('Voice recognition activated. Start speaking...');\n    };\n\n    recognition.onresult = (event) => {\n      const transcriptArr = Array.from(event.results)\n        .map((result) => result[0])\n        .map((result) => result.transcript);\n      setTranscript(transcriptArr.join(' '));\n    };\n\n    recognition.onend = () => {\n      console.log('Voice recognition stopped.');\n    };\n\n    // Start or stop recognition based on `isListening`\n    if (isListening) {\n      recognition.start();\n    } else {\n      recognition.stop();\n    }\n\n    // Clean up function to stop recognition when the component unmounts\n    return () => recognition.stop();\n  }, [isListening]);\n\n  return (\n    <div>\n      <button onClick={() => setIsListening((prevState) => !prevState)}>\n        {isListening ? 'Stop Listening' : 'Start Listening'}\n      </button>\n      <p>{transcript}</p>\n    </div>\n  );\n};\n\nexport default VoiceToText;\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGP,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAACQ,UAAU,EAAEC,aAAa,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAEhDC,SAAS,CAAC,MAAM;IACd,MAAMS,iBAAiB,GAAGC,MAAM,CAACD,iBAAiB,IAAIC,MAAM,CAACC,uBAAuB;IACpF,MAAMC,WAAW,GAAG,IAAIH,iBAAiB,CAAC,CAAC;IAE3CG,WAAW,CAACC,UAAU,GAAG,IAAI,CAAC,CAAC;IAC/BD,WAAW,CAACE,cAAc,GAAG,IAAI,CAAC,CAAC;IACnCF,WAAW,CAACG,IAAI,GAAG,OAAO,CAAC,CAAC;;IAE5BH,WAAW,CAACI,OAAO,GAAG,MAAM;MAC1BC,OAAO,CAACC,GAAG,CAAC,gDAAgD,CAAC;IAC/D,CAAC;IAEDN,WAAW,CAACO,QAAQ,GAAIC,KAAK,IAAK;MAChC,MAAMC,aAAa,GAAGC,KAAK,CAACC,IAAI,CAACH,KAAK,CAACI,OAAO,CAAC,CAC5CC,GAAG,CAAEC,MAAM,IAAKA,MAAM,CAAC,CAAC,CAAC,CAAC,CAC1BD,GAAG,CAAEC,MAAM,IAAKA,MAAM,CAACnB,UAAU,CAAC;MACrCC,aAAa,CAACa,aAAa,CAACM,IAAI,CAAC,GAAG,CAAC,CAAC;IACxC,CAAC;IAEDf,WAAW,CAACgB,KAAK,GAAG,MAAM;MACxBX,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;IAC3C,CAAC;;IAED;IACA,IAAIb,WAAW,EAAE;MACfO,WAAW,CAACiB,KAAK,CAAC,CAAC;IACrB,CAAC,MAAM;MACLjB,WAAW,CAACkB,IAAI,CAAC,CAAC;IACpB;;IAEA;IACA,OAAO,MAAMlB,WAAW,CAACkB,IAAI,CAAC,CAAC;EACjC,CAAC,EAAE,CAACzB,WAAW,CAAC,CAAC;EAEjB,oBACEH,OAAA;IAAA6B,QAAA,gBACE7B,OAAA;MAAQ8B,OAAO,EAAEA,CAAA,KAAM1B,cAAc,CAAE2B,SAAS,IAAK,CAACA,SAAS,CAAE;MAAAF,QAAA,EAC9D1B,WAAW,GAAG,gBAAgB,GAAG;IAAiB;MAAA6B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC7C,CAAC,eACTnC,OAAA;MAAA6B,QAAA,EAAIxB;IAAU;MAAA2B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAChB,CAAC;AAEV,CAAC;AAACjC,EAAA,CA9CID,WAAW;AAAAmC,EAAA,GAAXnC,WAAW;AAgDjB,eAAeA,WAAW;AAAC,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}